********
虚幻历史
********


详细历史大家谷歌或者百度就行了。

这里主要介绍一些会对我们编码过程中产生影响的一些历史。

虚幻4的上一个版本是
`虚幻3 <https://api.unrealengine.com/udk/Three/WebHomeCH.html>`_

虚幻3是主要是采用
`UnrealScript <https://api.unrealengine.com/udk/Three/UnrealScriptHomeCH.html>`_
来进行游戏开发的。

EPIC公司在2011年抛弃了UnrealScript，转而改为C++和蓝图，
虽然开发方式发生了变化，但是UnrealScript的所引入的基础概念是不会发生变化的。
因此了解UnrealScript是能够减轻一些我们看一长串C++的痛苦。

在编程领域，语言通常是为了解决某个领域的问题而出现的，通过把这些特定问题，封装
成语言的特定元素，可以加快我们处理该领域的能力。UnrealScript也是类似的。
先看下


UnrealScript设计目标
====================

`官网链接 <https://api.unrealengine.com/udk/Three/UnrealScriptReferenceCH.html>`_

UnrealScript的设计目的是为开发团队以及第三方Unreal开发人员提供了一个强大的内置编程语言，它满足了游戏编程的要求与细节。

UnrealScript的主要设计目标有：

- 支持主要的概念：时间、状态、属性及网络，这些概念是传统编程语言没有强调的。
  这将大大地简化UnrealScript代码。
  基于C/C++的AI和游戏逻辑编程的主要复杂性是处理要花费一定量的游戏时间来完成的事件以及处理依赖对象状态的各个方面的事件。 在C/C++中，这将会导致冗长的混乱的代码，使代码难于书写、理解、维护和调试的。
UnrealScript包含了对时间、状态和网络复制的内部支持，这大大地简化了游戏编程。

- 提供一种像Java类型编程语言一样简单的、面向对象的并在编译时进行错误检查的语言。
  就像Java为Web开发人员提供了一个干净的开发平台，UnrealScript为3D游戏提供了一个同样干净的、简单的、强大的编程语言。UnrealScript从Java语言中衍生的主要编程观念有：
- 没有指针并自动进行垃圾回收的环境；
- 一个简单的单继承类图；
- 编译时进行强类型检查；
- 安全的客户端执行的"sandbox（沙箱限制）"；
- 像C/C++/Java代码一样熟悉的外观和感觉。

- UnrealScript为了在游戏对象和交互方面而不是位和像素方面提供丰富的高层次的编程语言。UnrealScript在设计上必须有一些妥协，我们为了获得开发的简单性和强大性，从而牺牲了执行速度。毕竟， Unreal的底层的、对性能起重要作用的代码是使用C/C++书写的，在那里所获得的性能提高的价值超出了所增加的复杂性。UnrealScript是在那个层次的基础上进行运作的，在物体和交互性的层次上而不是位和像素的底层上。

在UnrealScript开发的早期，我们探索了几个主要的不同的编程语言范例，然后又放弃了，最终开发出了目前的UnrealScript。
首先，我们研究使用Sun 和 Microsoft为Windows设计的Java VM(虚拟机) 作为Unreal脚本语言的基础。
但最终证明在Unreal的情境中Java并没有提供比C/C++更大的编程好处，
反而由于缺乏所需要的语言功能(比如 运算符重载)而增加了一些令人沮丧的限制，
另外也证明由于VM过多的任务转换开销和Java垃圾回收器在处理大的对象图形时的低效率导致运行速度特别的慢。

其次，我们设计了基于Visual Basic变种的UnrealScript初期实现，它可以工作的很好，但是对于已经习惯于C/C++的程序员来说，
它不是那么友好。

最终基于我们想将游戏的特定概念映射到语言定义本身的愿望以及获得速度和熟悉度的需要，
我们决定将UnrealScript设置为基于C++/Java变种的语言。

结果证明这是一个好主意，因为它在很多方面大大地简化了Unreal代码。


抛弃UnrealScript
================

后来为什么EPIC又抛弃了UnrealScript,转为 C++ 呢,
`论坛上 <https://forums.unrealengine.com/development-discussion/c-gameplay-programming/2720-why-c-for-unreal-4/page3?2574-Why-C-for-Unreal-4=&viewfull=1>`_
面给出的解释是:

虽然脚本十分受新手的欢迎, 但它却成为了创新和发布的障碍. 
在Unreal引擎成长的过程中, 我们不断地踩到这样的坑. 
所以在2011年, 我们转移到了一个纯C++的架构上. 这么做有大把的理由:

- 随着引擎和社区的成长, 迫于压力不得不给脚本暴露越来越多的C++特性. 
  本来是个很好玩的沙盒, 最后却变成了个大沙漠.
- 随着脚本接口的扩充, 用于函数调用和类型转换的通信中间层变得越来越复杂和低效. 
- 像容器这样的高级数据类型的互操作变得让人抓狂, 因为脚本语言很难表示C++的模板语义.
- 开发者寻求高级C++特性的结果就是把他们的代码分成脚本和C++两块, 然后花费了大量时间在中间扯淡.
- 开发者如果想了解某个程序的行为时, 很快就会发现C++和脚本的调试工具是水火不相容的. 
  明明知道脚本中的一个值错了, 但却不知道是哪里的C++代码引起的, 反过来也一样. 

就是这些原因, 最终把Epic逼成了纯C++. 带来的好处有很多: 

- UE4变成了一个高度统一和易于调试的代码库, 没有了坑爹的互操作, 并且完全开放给程序员学习, 修改和扩展. 
  顺带不但游戏玩法代码的性能提升了, 而且C++中间件的集成也变容易了. 
- 把UE4建设成一个统一的C++代码库, 让游戏引擎和玩法程序员写代码时避免了中介两头忽悠, 及大地提升了便利性. 

这并不能代表C++就是理想的编写游戏玩法的语言了.
因为比起UnrealScript, C#和JavaScript, 它不但更复杂, 而且更危险.
不过这也从另一个角度也证明了它更强大, 正所谓”权利越大, 责任越大”. 

为了在C++的复杂性和代码编写中保持平衡, 我们根本没有做什么限制. 
不管你是调试整个代码库, 或是跟底层引擎系统聊天, 揍它们一顿, 
还是跟操作系统或其它高级的第三方中间件谈恋爱... 


总结
====

2种编程语言带来的复杂度是特别高的(那层厚厚的封装代码)，除非迫不得已，虚幻引擎在经历了
从UnrealScript到C++的转变过程中，权衡利弊，还是选了C++.给出的新理由中，不能忽视的一点是，
UnrealScript对新手是特别友好的，反观C++就不是了。因此使用门槛变高了。蓝图降低了这个门槛，
但是当你阅读代码时，看到那一堆 UFUNCTION的时候，还是比较头疼的，所以个人还是选择先从UnrealScript入手，
了解其基本概念，然后再转向C++.这样学习起来也可能比较容易。
